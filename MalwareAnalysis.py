import Main  # Import the Main module
import subprocess  # For executing external scripts
import pyfiglet  # For generating ASCII banners
import shutil  # For terminal width detection

# Direct access to constants from Main.py
bold, cyan, green, yellow, red, blue, reset = (
    Main.bold, Main.cyan, Main.green, Main.yellow, Main.red, Main.blue, Main.reset
)

def display_banner():
    """Display an ASCII banner."""
    terminal_width = shutil.get_terminal_size().columns
    banner = pyfiglet.figlet_format("MalBuster", font="slant")
    banner_lines = banner.split("\n")
    centered_banner = "\n".join(line.center(terminal_width) for line in banner_lines)
    
    print(f"{bold}{cyan}╔{'═' * (terminal_width - 2)}╗{reset}")
    print(f"{bold}{green}{centered_banner}{reset}")
    print(f"{bold}{cyan}╚{'═' * (terminal_width - 2)}╝{reset}")

def display_menu():
    """Display the Malware Analysis menu."""
    Main.clear_screen()
    display_banner()
    
    menu_options = {
        1: "Analyze ELF File",
        2: "Extract Strings",
        3: "Check File Entropy",
        4: "Log Analysis",
        5: "Scan with YARA Rules",
        0: "Return to Main Menu"
    }
    
    print(f"{bold}{cyan}─{'─' * 40}─{reset}")
    
    for key, value in menu_options.items():
        color = red if key == 0 else blue
        print(f"{bold}{color}{key}- {value}{reset}")

    print(f"{bold}{cyan}─{'─' * 40}─{reset}")

    handle_user_choice()

def handle_user_choice():
    """Handle user input and direct to the appropriate function."""
    try:
        choice = int(input(f"{bold}{yellow}Enter your choice (0-5): {reset}"))
        
        if choice not in range(6):
            print_error("Invalid choice. Please enter a number between 0 and 5.")
            return display_menu()
        
        process_choice(choice)

    except ValueError:
        print_error("Invalid input. Please enter a numeric value.")
        display_menu()
    except KeyboardInterrupt:
        print(f"\n{bold}{red}Exiting...{reset}")
        exit()

def process_choice(choice):
    """Process the user's choice and execute the corresponding script."""
    script_mapping = {
        1: "elf_analysis.py",
        2: "extract_strings.py",
        3: "file_entropy.py",
        4: "log_analysis.py",
        5: "yara_scan.py"
    }

    if choice == 0:
        print(f"{bold}{red}Returning to Main Menu...{reset}")
        return Main.menu()  # Calls the main menu from Main.py instead of exiting

    script = script_mapping.get(choice)
    if script:
        print(f"{bold}{blue}Executing {script}...{reset}")
        subprocess.run(["python3", script], check=True)  # Execute the selected script
    
    input(f"{bold}{yellow}Press Enter to return to the Malware Analysis menu...{reset}")
    display_menu()

def print_error(message):
    """Prints an error message in a standardized format."""
    print(f"\n{bold}{red}---------------------------------")
    print(f"{message}")
    print(f"----------------------------------{reset}")
    input(f"{bold}{yellow}Press Enter to continue...{reset}")

# Start the program if executed directly
if __name__ == "__main__":
    display_menu()
