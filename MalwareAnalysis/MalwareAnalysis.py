import sys
import os
# Add the parent directory (MalBuster) to sys.path
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))
import Main
import subprocess  # For executing external scripts
import pyfiglet  # For generating ASCII banners
import shutil  # For terminal width detection

# Direct access to constants from Main.py
bold, cyan, green, yellow, red, blue, reset = (
    Main.bold, Main.cyan, Main.green, Main.yellow, Main.red, Main.blue, Main.reset
)

# Define menu_options globally so it's accessible
menu_options = {
    1: "Static analysis",
    2: "Dynamic analysis",
    0: "Return to main page"
}

def display_banner():
    """Display an ASCII banner."""
    try:
        terminal_width = shutil.get_terminal_size().columns
    except:
        terminal_width = 80  # Fallback width if terminal size cannot be determined

    banner = pyfiglet.figlet_format("MalBuster", font="slant")
    banner_lines = banner.split("\n")
    centered_banner = "\n".join(line.center(terminal_width) for line in banner_lines)
    
    print(f"{bold}{cyan}╔{'═' * (terminal_width - 2)}╗{reset}")
    print(f"{bold}{green}{centered_banner}{reset}")
    print(f"{bold}{cyan}╚{'═' * (terminal_width - 2)}╝{reset}")

def display_menu():
    """Display the Malware Analysis menu."""
    Main.clear_screen()
    display_banner()
    
    print(f"{bold}{cyan}─{'─' * 40}─{reset}")
    
    for key, value in menu_options.items():
        color = red if key == 0 else blue
        print(f"{bold}{color}{key}- {value}{reset}")

    print(f"{bold}{cyan}─{'─' * 40}─{reset}")

    handle_user_choice()

def handle_user_choice():
    """Handle user input and direct to the appropriate function."""
    try:
        choice = int(input(f"{bold}{yellow}Enter your choice (0-2): {reset}"))
        
        if choice not in menu_options:
            print_error("Invalid choice. Please enter a number between 0 and 2.")
            return display_menu()
        
        if choice == 1:
            print(f"{bold}{blue}Starting Static Analysis...{reset}")
            static_analyis()  # Call static analysis menu
        
        elif choice == 2:
            print(f"{bold}{blue}Starting Dynamic Analysis...{reset}")
            dynamic_analysis()  # Call dynamic analysis menu
        
        elif choice == 0:
            print(f"{bold}{red}Returning to Main Menu...{reset}")
            return Main.menu()  # Call the main menu from Main.py
        
        input(f"{bold}{yellow}Press Enter to return to the Malware Analysis menu...{reset}")
        display_menu()

    except ValueError:
        print_error("Invalid input. Please enter a numeric value.")
        display_menu()
    except KeyboardInterrupt:
        print(f"\n{bold}{red}Exiting...{reset}")
        exit()

def print_error(message):
    """Prints an error message in a standardized format."""
    print(f"\n{bold}{red}---------------------------------")
    print(f"{message}")
    print(f"----------------------------------{reset}")
    input(f"{bold}{yellow}Press Enter to continue...{reset}")

def static_analyis():
    """Display the options for static analysis."""
    print("""
    1. Analyze ELF File
    2. Extract Strings
    3. Check File Entropy      
    4. Scan with YARA Rules
    0. Return to malware menu     
    """)
    try:
        choice = int(input(f"{bold}{yellow}Enter your choice (0-4): {reset}"))
        static_analyis_handler(choice)
    except ValueError:
        print_error("Invalid input. Please enter a numeric value.")
        static_analyis()

def static_analyis_handler(choice):
    """Handle actions based on static analysis choice."""
    if choice == 1:
        print(f"{bold}{blue}Analyzing ELF File...{reset}")
        # Example of running a script for ELF analysis (replace with actual logic)
        subprocess.run(["python3", "MalwareAnalysis/ElfAnalysis.py"], check=True)
    elif choice == 2:
        print(f"{bold}{blue}Extracting Strings...{reset}")
        subprocess.run(["python3", "MalwareAnalysis/StringsExtractor.py"], check=True)

    elif choice == 3:
        print(f"{bold}{blue}Checking File Entropy...{reset}")
        subprocess.run(["python3", "MalwareAnalysis/CheckEntropy.py"], check=True)
    elif choice == 4:
        print(f"{bold}{blue}Scanning with YARA Rules...{reset}")
        # Example of running a script for YARA scan
        subprocess.run(["python3", "MalwareAnalysis/YaraScanner.py"], check=True)
    elif choice == 0:
        print(f"{bold}{red}Returning to Malware Menu...{reset}")
        display_menu()
    else:
        print_error("Invalid choice. Please enter a number between 0 and 4.")
        static_analyis()    
    

def dynamic_analysis():
    """Display the options for dynamic analysis."""
    print("""
    1. Execute in Sandbox
    2. Monitor System Calls
    3. Analyze Process Tree      
    0. Return To malware menu  
    """)
    try:
        choice = int(input(f"{bold}{yellow}Enter your choice (0-3): {reset}"))
        dynamic_analysis_handler(choice)
    except ValueError:
        print_error("Invalid input. Please enter a numeric value.")
        dynamic_analysis()

def dynamic_analysis_handler(choice):
    """Handle actions based on dynamic analysis choice."""
    if choice == 1:
        print(f"{bold}{blue}Executing in Sandbox...{reset}")
        # Example of running a sandbox execution (replace with actual logic)
        subprocess.run(["python3", "execute_in_sandbox.py"], check=True)
    elif choice == 2:
        print(f"{bold}{blue}Monitoring System Calls...{reset}")
        # Example of monitoring system calls
        subprocess.run(["python3", "monitor_sys_calls.py"], check=True)
    elif choice == 3:
        print(f"{bold}{blue}Analyzing Process Tree...{reset}")
        # Example of analyzing the process tree
        subprocess.run(["python3", "analyze_process_tree.py"], check=True)
    elif choice == 0:
        print(f"{bold}{red}Returning to Malware Menu...{reset}")
        display_menu()
    else:
        print_error("Invalid choice. Please enter a number between 0 and 3.")
        dynamic_analysis()

# Start the program if executed directly
if __name__ == "__main__":
    display_menu()