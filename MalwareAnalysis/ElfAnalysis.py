import sys
import os
import pyfiglet
import shutil
from colorama import Fore, Style, init

# Initialize colorama for Windows compatibility
init(autoreset=True)

# Ensure we can import Main.py from the parent directory
parent_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))
if parent_dir not in sys.path:
    sys.path.append(parent_dir)

try:
    import Main  
except ImportError:
    print("Error: Unable to import 'Main.py'. Ensure you're running the script from the correct directory.")
    exit(1)

# Global variable for minimum string length
MINIMUM_LENGTH = 4  # Default minimum string length

def clear_screen():
    """Clears the terminal screen for better readability."""
    os.system('cls' if os.name == 'nt' else 'clear')

def display_banner():
    """Displays a stylized banner using pyfiglet."""
    try:
        terminal_width = shutil.get_terminal_size().columns
    except:
        terminal_width = 80  # Fallback width if terminal size cannot be determined

    banner = pyfiglet.figlet_format("ELF ANALYSER", font="slant")
    banner_lines = banner.split("\n")
    centered_banner = "\n".join(line.center(terminal_width) for line in banner_lines)

    print(Fore.CYAN + "=" * terminal_width)
    print(Fore.GREEN + centered_banner)
    print(Fore.CYAN + "=" * terminal_width + Style.RESET_ALL)

def display_menu():
    """Displays the main menu with colors."""
    clear_screen()
    display_banner()

    print(Fore.YELLOW + f"""
    {Fore.BLUE}[1] {Fore.CYAN}Display ELF Header Information
    {Fore.BLUE}[2] {Fore.CYAN}Analyze Program Headers (Segments)
    {Fore.BLUE}[3] {Fore.CYAN}Analyze Section Headers (Sections)
    {Fore.BLUE}[2] {Fore.CYAN}Extract Strings from File
    {Fore.BLUE}[3] {Fore.CYAN}List Symbols
    {Fore.BLUE}[2] {Fore.CYAN}Check Dynamic Linking Information
    {Fore.BLUE}[3] {Fore.CYAN}Check Security Features
    {Fore.RED}[0] Exit
    """)

    choice = input(Fore.YELLOW + "Enter Your Choice: " + Style.RESET_ALL)
    handle_choice(choice)

def handle_choice(choice):
    """Handles menu selection."""
    global MINIMUM_LENGTH

    if choice == "1":
        print(Fore.GREEN + "Extracting strings from file...")
        # Add functionality for extracting strings here
    elif choice == "2":
        print(Fore.GREEN + "Setting minimum string length...")
        # Add functionality for setting minimum string length here
    elif choice == "3":
        print(Fore.GREEN + "Saving extracted strings to file...")
        # Add functionality for saving strings to file here
    elif choice == "0":
        print(Fore.RED + "Returning to Malware Analysis Menu. Goodbye!")
        exit(1)
    else:
        print(Fore.RED + "Invalid Choice. Please Try Again.")
    
    input(Fore.YELLOW + "Press Enter to continue...")
    display_menu()

# Start the program if executed directly
if __name__ == "__main__":
    display_menu()