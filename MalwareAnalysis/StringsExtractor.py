import sys
import os
import re
import pyfiglet
import shutil
from colorama import Fore, Style, init

# Initialize colorama for Windows compatibility
init(autoreset=True)

# Ensure we can import Main.py from the parent directory
parent_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))
if parent_dir not in sys.path:
    sys.path.append(parent_dir)

try:
    import Main  # Import the Main module
except ImportError:
    print("Error: Unable to import 'Main.py'. Ensure you're running the script from the correct directory.")
    exit(1)

# Global variable for minimum string length
MINIMUM_LENGTH = 3  

def clear_screen():
    """Clears the terminal screen for better readability."""
    os.system('cls' if os.name == 'nt' else 'clear')

def display_banner():
    """Displays a stylized banner using pyfiglet."""
    try:
        terminal_width = shutil.get_terminal_size().columns
    except:
        terminal_width = 80 

    banner = pyfiglet.figlet_format("String Extractor", font="slant")
    banner_lines = banner.split("\n")
    centered_banner = "\n".join(line.center(terminal_width) for line in banner_lines)

    print(Fore.CYAN + "=" * terminal_width)
    print(Fore.GREEN + centered_banner)
    print(Fore.CYAN + "=" * terminal_width + Style.RESET_ALL)

def display_menu():
    """Displays the main menu with colors."""
    clear_screen()
    display_banner()

    print(Fore.YELLOW + f"""
    {Fore.BLUE}[1] {Fore.CYAN}Extract Strings from File
    {Fore.BLUE}[2] {Fore.CYAN}Set Minimum String Length {Fore.MAGENTA}(Current: {MINIMUM_LENGTH})
    {Fore.BLUE}[3] {Fore.CYAN}Save Extracted Strings to File
    {Fore.RED}[0] Exit
    """)

    choice = input(Fore.YELLOW + "Enter Your Choice: " + Style.RESET_ALL)
    handle_choice(choice)

def handle_choice(choice):
    """Handles menu selection."""
    if choice == "1":
        extract_from_file() 
    elif choice == "2":
        set_minimum_length()
    elif choice == "3":
        save_strings_to_file()
    elif choice == "0":
        print(Fore.RED + "Exiting program. Goodbye!")
        exit(0)
    else:
        print(Fore.RED + "Invalid Choice. Please Try Again.")
        input(Fore.YELLOW + "Press Enter to continue...")
    display_menu()

def extract_ascii_strings(data, min_length):
    """Extracts ASCII strings from binary data."""
    pattern = rb'[\x20-\x7E]{' + bytes(f"{min_length},", "utf-8") + b'}'
    return re.findall(pattern, data)

def extract_unicode_strings(data, min_length):
    """Extracts Unicode strings from binary data."""
    pattern = rb'(?:[\x20-\x7E]\x00){' + bytes(f"{min_length},", "utf-8") + b'}'
    matches = re.findall(pattern, data)
    return [m.decode('utf-16le') for m in matches]

def extract_strings(file_path):
    """Extracts both ASCII and Unicode strings from a file."""
    try:
        ascii_strings, unicode_strings = [], []
        with open(file_path, "rb") as f:
            while chunk := f.read(4096):  # Read in chunks of 4KB
                ascii_strings.extend(extract_ascii_strings(chunk, MINIMUM_LENGTH))
                unicode_strings.extend(extract_unicode_strings(chunk, MINIMUM_LENGTH))
        return ascii_strings, unicode_strings
    except FileNotFoundError:
        print(Fore.RED + "File not found. Please check the file path.")
        return [], []

def extract_from_file():
    """Handles string extraction from a single file."""
    file_path = input(Fore.YELLOW + "Enter File Path: " + Style.RESET_ALL).strip()
    
    if not os.path.isfile(file_path):
        print(Fore.RED + "Invalid file path! Please try again.")
        input(Fore.YELLOW + "Press Enter to continue...")
        return

    ascii_strings, unicode_strings = extract_strings(file_path)

    print(Fore.GREEN + "\nExtracted ASCII Strings:")
    for s in ascii_strings:
        print(Fore.CYAN + s.decode('ascii', errors='ignore'))

    print(Fore.GREEN + "\nExtracted Unicode Strings:")
    for s in unicode_strings:
        print(Fore.MAGENTA + s)

    input(Fore.YELLOW + "\nPress Enter to return to the main menu...")

def set_minimum_length():
    """Allows the user to set a minimum string length."""
    global MINIMUM_LENGTH  # Ensure global variable is updated
    size_input = input(Fore.YELLOW + "Enter minimum length (default is 4, press Enter to use default): " + Style.RESET_ALL).strip()

    if not size_input:
        MINIMUM_LENGTH = 4
    else:
        try:
            MINIMUM_LENGTH = int(size_input)
            if MINIMUM_LENGTH < 1:
                raise ValueError
        except ValueError:
            print(Fore.RED + "Invalid input. Setting minimum length to default (4).")
            MINIMUM_LENGTH = 4

    input(Fore.YELLOW + "Press Enter to return to the main menu...")

def save_strings_to_file():
    """Saves extracted strings from a file to an external file."""
    file_path = input(Fore.YELLOW + "Enter the file path to extract strings from: " + Style.RESET_ALL).strip()

    if not os.path.isfile(file_path):
        print(Fore.RED + "File not found. Please check the file path.")
        input(Fore.YELLOW + "Press Enter to continue...")
        return

    ascii_strings, _ = extract_strings(file_path)
    extracted_strings = [s.decode('ascii', errors='ignore') for s in ascii_strings]

    output_file = input(Fore.YELLOW + "Enter output file name (e.g., output.txt): " + Style.RESET_ALL).strip()
    
    output_directory = "MalwareAnalysis"
    os.makedirs(output_directory, exist_ok=True)  # Ensure directory exists

    output_path = os.path.join(output_directory, output_file)

    if os.path.exists(output_path):
        overwrite = input(Fore.RED + f"File '{output_path}' exists. Overwrite? (y/n): " + Style.RESET_ALL).strip().lower()
        if overwrite != 'y':
            print(Fore.RED + "Save operation canceled.")
            return

    with open(output_path, 'w') as f:
        for string in extracted_strings:
            f.write(string + '\n')
    
    print(Fore.GREEN + f"Extracted strings saved to {output_path}")

    input(Fore.YELLOW + "Press Enter to return to the main menu...")

# Main Program Loop
if __name__ == "__main__":
    while True:
        display_menu()
